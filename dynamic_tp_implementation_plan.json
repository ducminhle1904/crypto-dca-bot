{
  "project": "Enhanced DCA Bot - Dynamic Take Profit Implementation",
  "version": "1.0.0",
  "created": "2025-01-17",
  "overview": {
    "description": "Implementation plan for dynamic take profit system that adapts to market conditions",
    "scope": "Add volatility-based and indicator-based dynamic TP while maintaining existing multi-level TP for fixed mode",
    "constraints": [
      "Multi-level TP (5 levels) only for fixed TP mode",
      "Dynamic TP uses single adaptive level",
      "No support/resistance-based TP",
      "Must integrate with existing ATR and indicator infrastructure"
    ],
    "benefits": [
      "Adaptive profit targets based on market volatility",
      "Better risk/reward in different market conditions",
      "Integration with existing technical indicators",
      "Backtestable and optimizable"
    ]
  },
  "architecture": {
    "design_principles": [
      "Leverage existing ATR infrastructure",
      "Maintain backward compatibility",
      "Interface-based design for extensibility",
      "Type-safe implementation"
    ],
    "integration_points": [
      "internal/strategy/enhanced_dca.go - Core strategy logic",
      "internal/backtest/engine.go - Backtest TP execution",
      "internal/config/live_bot_config.go - Configuration management",
      "cmd/dca-backtest/ - CLI interface and flags",
      "pkg/config/dca_config.go - DCA-specific configuration"
    ]
  },
  "implementation_phases": {
    "phase_1": {
      "name": "Core Dynamic TP Framework",
      "duration": "2-3 days",
      "priority": "high",
      "tasks": [
        {
          "task": "Create DynamicTPConfig structure",
          "files": [
            "internal/config/live_bot_config.go",
            "pkg/config/dca_config.go"
          ],
          "description": "Define configuration structure for dynamic TP strategies",
          "implementation": {
            "struct_definition": {
              "DynamicTPConfig": {
                "Strategy": "string - volatility_adaptive, indicator_based, fixed",
                "BaseTPPercent": "float64 - Base TP percentage (e.g., 0.02)",
                "VolatilityConfig": {
                  "Multiplier": "float64 - ATR sensitivity (e.g., 0.5)",
                  "MinTPPercent": "float64 - Minimum TP (e.g., 0.01)",
                  "MaxTPPercent": "float64 - Maximum TP (e.g., 0.05)",
                  "ATRPeriod": "int - ATR calculation period (default: 14)"
                },
                "IndicatorConfig": {
                  "Weights": "map[string]float64 - Indicator weights",
                  "StrengthMultiplier": "float64 - Signal strength sensitivity",
                  "MinTPPercent": "float64 - Minimum TP",
                  "MaxTPPercent": "float64 - Maximum TP"
                }
              }
            }
          }
        },
        {
          "task": "Implement dynamic TP calculation methods",
          "files": ["internal/strategy/enhanced_dca.go"],
          "description": "Add methods for calculating adaptive TP based on market conditions",
          "methods": [
            "calculateDynamicTP(currentCandle, data) float64",
            "calculateVolatilityBasedTP(currentCandle, data) float64",
            "calculateIndicatorBasedTP(currentCandle, data) float64",
            "convertSignalToTPStrength(signal) float64",
            "validateDynamicTPConfig() error"
          ]
        },
        {
          "task": "Update strategy interface",
          "files": ["internal/strategy/interface.go"],
          "description": "Extend strategy interface to support dynamic TP",
          "interface_changes": [
            "Add GetDynamicTPPercent(context) float64 method",
            "Add IsDynamicTPEnabled() bool method"
          ]
        }
      ]
    },
    "phase_2": {
      "name": "Backtest Engine Integration",
      "duration": "2-3 days",
      "priority": "high",
      "tasks": [
        {
          "task": "Modify backtest engine for dynamic TP",
          "files": ["internal/backtest/engine.go"],
          "description": "Update TP execution logic to handle dynamic vs fixed TP modes",
          "changes": [
            "Add dynamicTPEnabled bool field",
            "Add calculateCurrentTPTarget() method",
            "Modify checkAndExecuteSingleTP to use dynamic targets",
            "Add TP target tracking to trade records",
            "Update cycle summary with dynamic TP metrics"
          ]
        },
        {
          "task": "Add dynamic TP metrics to results",
          "files": ["internal/backtest/metrics.go"],
          "description": "Track dynamic TP performance metrics",
          "new_metrics": [
            "AvgTPPercent - Average TP percentage used",
            "TPRangeUtilization - How much of min/max range was used",
            "VolatilityTPCorrelation - Correlation between volatility and TP",
            "DynamicTPHitRate - Hit rate for dynamic vs fixed TP"
          ]
        },
        {
          "task": "Update trade structure",
          "files": ["internal/backtest/engine.go"],
          "description": "Add dynamic TP tracking to trade records",
          "trade_fields": [
            "TPTarget float64 - Calculated TP target for this trade",
            "TPStrategy string - TP strategy used (fixed/volatility/indicator)",
            "MarketVolatility float64 - ATR at time of entry",
            "SignalStrength float64 - Indicator strength at entry"
          ]
        }
      ]
    },
    "phase_3": {
      "name": "CLI and Configuration",
      "duration": "1-2 days",
      "priority": "medium",
      "tasks": [
        {
          "task": "Add dynamic TP command line flags",
          "files": ["cmd/dca-backtest/flags.go"],
          "description": "Extend CLI with dynamic TP configuration options",
          "new_flags": [
            "DynamicTPStrategy *string - Dynamic TP strategy type",
            "TPVolatilityMult *float64 - Volatility multiplier",
            "TPMinPercent *float64 - Minimum TP percentage",
            "TPMaxPercent *float64 - Maximum TP percentage",
            "TPIndicatorWeights *string - Comma-separated indicator:weight pairs",
            "TPStrengthMult *float64 - Signal strength multiplier"
          ],
          "flag_defaults": {
            "DynamicTPStrategy": "fixed",
            "TPVolatilityMult": 0.5,
            "TPMinPercent": 0.01,
            "TPMaxPercent": 0.05,
            "TPStrengthMult": 0.3
          }
        },
        {
          "task": "Update configuration loading",
          "files": ["cmd/dca-backtest/main.go"],
          "description": "Integrate dynamic TP flags with configuration system",
          "changes": [
            "Add createDynamicTPConfigFromFlags() function",
            "Update loadDCAConfiguration() to handle dynamic TP",
            "Add dynamic TP validation in ValidateDCAFlags()",
            "Update printConfigSummary() to show dynamic TP settings"
          ]
        },
        {
          "task": "Extend help and documentation",
          "files": ["cmd/dca-backtest/flags.go", "cmd/dca-backtest/README.md"],
          "description": "Add comprehensive help for dynamic TP features",
          "help_sections": [
            "Dynamic TP strategy explanations",
            "Parameter tuning guidelines",
            "Example commands for each strategy",
            "Performance comparison examples"
          ]
        }
      ]
    },
    "phase_4": {
      "name": "Optimization Integration",
      "duration": "2-3 days",
      "priority": "medium",
      "tasks": [
        {
          "task": "Add dynamic TP to genetic algorithm",
          "files": ["pkg/optimization/dca_optimizer.go"],
          "description": "Include dynamic TP parameters in optimization process",
          "optimization_ranges": {
            "VolatilityMultiplier": "0.1 to 2.0 (step 0.1)",
            "MinTPPercent": "0.005 to 0.02 (step 0.001)",
            "MaxTPPercent": "0.02 to 0.08 (step 0.005)",
            "StrengthMultiplier": "0.1 to 1.0 (step 0.1)"
          }
        },
        {
          "task": "Update fitness function",
          "files": ["pkg/optimization/dca_optimizer.go"],
          "description": "Modify fitness calculation to account for dynamic TP performance",
          "fitness_components": [
            "Risk-adjusted return with dynamic TP",
            "TP hit rate optimization",
            "Volatility adaptation effectiveness",
            "Drawdown reduction through adaptive TP"
          ]
        }
      ]
    },
    "phase_5": {
      "name": "Reporting and Analytics",
      "duration": "1-2 days",
      "priority": "low",
      "tasks": [
        {
          "task": "Enhanced console output",
          "files": ["pkg/reporting/console.go"],
          "description": "Add dynamic TP metrics to console reporting",
          "new_output_sections": [
            "Dynamic TP Summary - strategy, avg TP, range utilization",
            "TP Adaptation Analysis - volatility correlation, effectiveness",
            "Comparative Performance - dynamic vs fixed TP simulation"
          ]
        },
        {
          "task": "Excel report enhancements",
          "files": ["pkg/reporting/excel.go"],
          "description": "Add dynamic TP analysis to Excel reports",
          "new_sheets": [
            "TP Analysis - TP targets over time, volatility correlation",
            "Dynamic Metrics - adaptation effectiveness, parameter sensitivity"
          ]
        }
      ]
    }
  },
  "configuration_structure": {
    "json_config_example": {
      "strategy": {
        "symbol": "BTCUSDT",
        "base_amount": 50,
        "max_multiplier": 3.0,
        "tp_percent": 0.02,
        "use_tp_levels": true,
        "dynamic_tp": {
          "strategy": "volatility_adaptive",
          "base_tp_percent": 0.02,
          "volatility_config": {
            "multiplier": 0.5,
            "min_tp_percent": 0.01,
            "max_tp_percent": 0.05,
            "atr_period": 14
          },
          "indicator_config": {
            "weights": {
              "rsi": 0.3,
              "macd": 0.25,
              "bb": 0.2,
              "hull_ma": 0.15,
              "stochrsi": 0.1
            },
            "strength_multiplier": 0.3,
            "min_tp_percent": 0.01,
            "max_tp_percent": 0.04
          }
        }
      }
    },
    "strategy_modes": {
      "fixed": {
        "description": "Traditional fixed TP with multi-level system (5 levels)",
        "tp_system": "multi_level",
        "levels": 5,
        "adaptivity": "none"
      },
      "volatility_adaptive": {
        "description": "Single adaptive TP based on market volatility (ATR)",
        "tp_system": "single_level",
        "adaptivity": "high",
        "formula": "BaseTP * (1 + normalizedVolatility * multiplier)"
      },
      "indicator_based": {
        "description": "Single adaptive TP based on indicator signal strength",
        "tp_system": "single_level",
        "adaptivity": "medium",
        "formula": "BaseTP * (0.7 + avgSignalStrength * strengthMultiplier)"
      }
    }
  },
  "implementation_details": {
    "volatility_adaptive_algorithm": {
      "steps": [
        "Calculate current ATR using existing atrCalculator",
        "Normalize ATR as percentage of current price",
        "Apply volatility multiplier: adjustment = normalizedVolatility * multiplier",
        "Calculate dynamic TP: baseTP * (1 + adjustment)",
        "Apply min/max bounds",
        "Return calculated TP percentage"
      ],
      "formula": "TP = BaseTP * (1 + (ATR/Price) * Multiplier)",
      "bounds": "max(MinTP, min(MaxTP, calculatedTP))"
    },
    "indicator_based_algorithm": {
      "steps": [
        "Get current signals from all configured indicators",
        "Convert each signal to strength value (-1 to 1)",
        "Calculate weighted average strength",
        "Apply strength multiplier to get TP adjustment",
        "Calculate dynamic TP with base adjustment range",
        "Apply min/max bounds"
      ],
      "formula": "TP = BaseTP * (0.7 + avgStrength * StrengthMultiplier)",
      "strength_mapping": {
        "StrongBuy": 1.0,
        "Buy": 0.7,
        "WeakBuy": 0.4,
        "Hold": 0.0,
        "WeakSell": -0.4,
        "Sell": -0.7,
        "StrongSell": -1.0
      }
    }
  },
  "testing_strategy": {
    "unit_tests": [
      "TestDynamicTPCalculation - Test TP calculation methods",
      "TestVolatilityBasedTP - Test ATR-based TP logic",
      "TestIndicatorBasedTP - Test signal-strength TP logic",
      "TestDynamicTPBounds - Test min/max boundary enforcement",
      "TestDynamicTPConfig - Test configuration validation"
    ],
    "integration_tests": [
      "TestBacktestWithDynamicTP - Full backtest with dynamic TP",
      "TestOptimizationWithDynamicTP - Optimization with dynamic parameters",
      "TestDynamicTPReporting - Verify enhanced reporting output"
    ],
    "performance_tests": [
      "BenchmarkDynamicTPCalculation - Performance impact assessment",
      "TestMemoryUsage - Memory overhead with dynamic TP",
      "TestLargeDatasetPerformance - Performance with large historical datasets"
    ]
  },
  "example_commands": {
    "basic_usage": {
      "volatility_adaptive": "dca-backtest -symbol BTCUSDT -indicators \"hull_ma,stochrsi,keltner\" -dynamic-tp volatility_adaptive -tp-volatility-mult 0.5",
      "indicator_based": "dca-backtest -symbol ETHUSDT -indicators \"rsi,macd,bb,obv\" -dynamic-tp indicator_based -tp-strength-mult 0.3",
      "fixed_multi_level": "dca-backtest -symbol BTCUSDT -indicators \"rsi,macd,bb\" -tp-percent 0.02 -use-tp-levels"
    },
    "optimization": {
      "volatility_optimization": "dca-backtest -symbol BTCUSDT -indicators \"supertrend,mfi,keltner\" -dynamic-tp volatility_adaptive -optimize",
      "indicator_optimization": "dca-backtest -symbol SUIUSDT -indicators \"hull_ma,stochrsi,wavetrend\" -dynamic-tp indicator_based -optimize",
      "comparison_test": "dca-backtest -symbol BTCUSDT -all-intervals -dynamic-tp volatility_adaptive"
    },
    "advanced_usage": {
      "custom_bounds": "dca-backtest -symbol ETHUSDT -dynamic-tp volatility_adaptive -tp-min-percent 0.005 -tp-max-percent 0.08 -tp-volatility-mult 0.8",
      "walk_forward": "dca-backtest -symbol BTCUSDT -dynamic-tp indicator_based -optimize -wf-enable -wf-rolling",
      "indicator_weights": "dca-backtest -symbol ADAUSDT -dynamic-tp indicator_based -tp-indicator-weights \"rsi:0.4,macd:0.3,bb:0.3\""
    }
  },
  "validation_checklist": [
    "✅ Dynamic TP strategies calculate correctly",
    "✅ ATR integration works with existing infrastructure",
    "✅ Indicator signals properly converted to TP adjustments",
    "✅ Min/max bounds enforced in all scenarios",
    "✅ Backtest results include dynamic TP metrics",
    "✅ CLI flags work with all dynamic TP options",
    "✅ Configuration loading handles dynamic TP settings",
    "✅ Optimization includes dynamic TP parameters",
    "✅ Reporting shows dynamic TP analysis",
    "✅ Performance impact is minimal (<5% overhead)",
    "✅ Multi-level TP still works for fixed mode",
    "✅ Backward compatibility maintained"
  ],
  "future_enhancements": {
    "advanced_strategies": [
      "Time-based TP adaptation (different TP for different market sessions)",
      "Volume-based TP adjustments",
      "Momentum-based TP scaling"
    ],
    "machine_learning": [
      "ML-based TP prediction using historical patterns",
      "Reinforcement learning for optimal TP timing",
      "Neural network-based market regime detection"
    ],
    "risk_management": [
      "Dynamic TP with trailing stop integration",
      "Portfolio-level TP coordination",
      "Correlation-based TP adjustments"
    ]
  },
  "risk_assessment": {
    "implementation_risks": [
      "Complexity increase in TP logic",
      "Potential performance impact",
      "Configuration complexity for users"
    ],
    "mitigation_strategies": [
      "Comprehensive unit testing",
      "Performance benchmarking",
      "Clear documentation and examples",
      "Gradual rollout with fallback to fixed TP"
    ],
    "business_risks": [
      "Dynamic TP may reduce profits in some market conditions",
      "Learning curve for optimal parameter tuning"
    ],
    "risk_controls": [
      "Conservative default parameters",
      "Extensive backtesting before live deployment",
      "A/B testing framework for strategy comparison"
    ]
  }
}
