{
  "project_name": "Grid Bot Backtesting System",
  "version": "1.0.0",
  "created_date": "2025-01-03",
  "description": "Comprehensive planning document for implementing a grid bot backtesting system within the Enhanced DCA Bot project",

  "system_analysis": {
    "current_architecture": {
      "data_infrastructure": {
        "csv_provider": "pkg/data/csv_provider.go - Fully mature CSV reading with OHLCV parsing, validation, and error handling",
        "data_types": "pkg/types/market_data.go - Standard OHLCV struct ready for reuse",
        "file_locator": "pkg/data/file_locator.go - Can locate data files by exchange/symbol/interval",
        "cached_provider": "Available for performance optimization"
      },
      "backtesting_framework": {
        "engine_core": "internal/backtest/engine.go - Mature engine with equity tracking, drawdown calculation, commission handling",
        "position_tracking": "Advanced position management with cycle tracking and exposure calculation",
        "trade_execution": "Market order simulation with realistic commission and lot size constraints",
        "metrics_calculation": "Comprehensive metrics: Sharpe, Sortino, Calmar ratios, max drawdown, equity curves"
      },
      "exchange_integration": {
        "futures_support": "internal/exchange/bybit/trading.go - Full futures trading support with position management",
        "order_types": "Market/Limit orders, leverage settings, position sizing",
        "adapter_pattern": "Exchange-agnostic adapter system for multi-exchange support"
      },
      "orchestration": {
        "workflow_management": "pkg/orchestrator/ - Mature workflow orchestration for batch processing",
        "optimization_support": "pkg/optimization/ - Genetic algorithm optimization ready for grid parameters",
        "parallel_processing": "Worker pool pattern for concurrent backtests"
      },
      "reporting": {
        "multi_format_output": "pkg/reporting/ - Excel, CSV, JSON output with rich formatting",
        "detailed_analytics": "Trade analysis, cycle summaries, performance metrics",
        "visual_components": "Excel charts and conditional formatting"
      }
    },
    "reusable_components": [
      "CSV data provider for historical data loading",
      "OHLCV data structures and validation",
      "Commission calculation and realistic order execution",
      "Equity curve tracking and drawdown calculation",
      "Comprehensive metrics calculation (Sharpe, Sortino, etc.)",
      "Excel reporting with rich formatting and charts",
      "Orchestrator pattern for batch processing",
      "Genetic algorithm framework for parameter optimization"
    ]
  },

  "grid_bot_requirements": {
    "core_functionality": {
      "trading_modes": {
        "long_only": "Buy at grid levels, sell at profit targets above",
        "short_only": "Sell at grid levels, buy back at profit targets below",
        "both_directions": "Long and short grids operating simultaneously in same price range"
      },
      "grid_configuration": {
        "price_range": {
          "lower_bound": "Minimum price for grid operation",
          "upper_bound": "Maximum price for grid operation",
          "validation": "Ensure current price is within range at backtest start"
        },
        "grid_spacing": {
          "percentage_based": "Fixed percentage between grid levels (e.g., 2%)",
          "absolute_based": "Fixed dollar amount between levels",
          "dynamic_spacing": "Variable spacing based on volatility or other factors"
        },
        "grid_count": "Total number of grid levels within the price range",
        "position_sizing": {
          "fixed_amount": "Same dollar amount per grid level",
          "proportional": "Percentage of available balance per grid",
          "geometric": "Increasing/decreasing amounts per level"
        }
      },
      "profit_mechanism": {
        "profit_per_grid": "Fixed percentage profit target for each grid position",
        "profit_calculation": "Gross profit before commission vs net profit after commission",
        "profit_realization": "When and how profits are taken (immediate vs accumulated)"
      }
    },
    "futures_specific": {
      "leverage": "Configurable leverage for position sizing",
      "margin_management": "Track margin usage and free margin",
      "position_direction": "Long/Short position management for futures contracts",
      "funding_costs": "Optional simulation of funding fee impact"
    },
    "position_tracking": {
      "individual_grids": "Each grid level maintains separate position tracking",
      "detailed_analytics": {
        "entry_price": "Exact price where grid was triggered",
        "exit_price": "Price where profit was taken",
        "hold_duration": "Time between entry and exit",
        "profit_loss": "Individual P&L for each grid trade",
        "grid_level": "Which level in the grid (1, 2, 3, etc.)",
        "direction": "Long or short position"
      },
      "aggregate_metrics": {
        "total_active_grids": "Number of currently open positions",
        "total_margin_used": "Sum of all position margins",
        "unrealized_pnl": "Mark-to-market value of open positions",
        "realized_pnl": "Cumulative profit from closed positions"
      }
    }
  },

  "technical_architecture": {
    "grid_bot_engine": {
      "location": "internal/backtest/grid_engine.go",
      "responsibilities": [
        "Grid level calculation and management",
        "Price trigger detection and order execution",
        "Individual position tracking per grid level",
        "Profit target monitoring and closure",
        "Margin and leverage calculation for futures"
      ],
      "key_structs": {
        "GridConfig": {
          "fields": [
            "Symbol string",
            "LowerBound float64",
            "UpperBound float64",
            "GridCount int",
            "GridSpacing float64",
            "ProfitPercent float64",
            "TradingMode string // 'long', 'short', 'both'",
            "PositionSize float64",
            "Leverage float64",
            "Category string // 'linear' for futures"
          ]
        },
        "GridLevel": {
          "fields": [
            "Level int",
            "Price float64",
            "Direction string // 'long' or 'short'",
            "IsActive bool",
            "Position *GridPosition",
            "ProfitTarget float64"
          ]
        },
        "GridPosition": {
          "fields": [
            "EntryTime time.Time",
            "EntryPrice float64",
            "Quantity float64",
            "Commission float64",
            "UnrealizedPnL float64",
            "ExitTime *time.Time",
            "ExitPrice *float64",
            "RealizedPnL *float64",
            "Status string // 'open', 'closed', 'cancelled'"
          ]
        },
        "GridBacktestResults": {
          "extends": "internal/backtest.BacktestResults",
          "additional_fields": [
            "TotalGridTrades int",
            "SuccessfulGrids int",
            "FailedGrids int",
            "AvgHoldTime time.Duration",
            "AvgProfitPerGrid float64",
            "MaxConcurrentGrids int",
            "GridUtilization float64",
            "TotalCommissionPaid float64"
          ]
        }
      }
    },
    "grid_strategy": {
      "location": "internal/strategy/grid_strategy.go",
      "responsibilities": [
        "Implement strategy.Strategy interface for grid logic",
        "Price level trigger detection",
        "Entry/exit signal generation based on grid rules",
        "Risk management for maximum concurrent positions"
      ],
      "integration_points": [
        "Uses existing strategy.Strategy interface",
        "Compatible with current backtest engine workflow",
        "Leverages existing indicator framework if needed"
      ]
    },
    "data_provider_integration": {
      "csv_reader": "Reuse pkg/data/csv_provider.go without modification",
      "data_validation": "Leverage existing OHLCV validation and error handling",
      "performance": "Use cached provider for large backtests"
    },
    "reporting_enhancement": {
      "location": "pkg/reporting/grid_reporter.go",
      "grid_specific_reports": {
        "grid_performance_summary": "Success rate, avg profit per grid, utilization",
        "individual_grid_details": "Entry/exit for each grid level with P&L",
        "heat_map_visualization": "Grid level performance across price ranges",
        "timing_analysis": "Hold duration distribution and patterns"
      },
      "excel_enhancements": {
        "grid_visualization": "Color-coded grid levels showing activity",
        "profit_distribution": "Histogram of profits per grid level",
        "utilization_charts": "Grid utilization over time"
      }
    }
  },

  "implementation_phases": {
    "phase_1_core_grid_engine": {
      "description": "Implement basic grid calculation and position tracking",
      "deliverables": [
        "GridConfig structure and validation",
        "Grid level calculation algorithms",
        "Basic position tracking per grid level",
        "Integration with existing backtest engine"
      ],
      "estimated_effort": "3-4 days",
      "dependencies": ["Understanding of current backtest engine"]
    },
    "phase_2_strategy_integration": {
      "description": "Implement grid strategy following existing patterns",
      "deliverables": [
        "GridStrategy implementing strategy.Strategy interface",
        "Price trigger detection logic",
        "Entry/exit signal generation",
        "Integration with backtest workflow"
      ],
      "estimated_effort": "2-3 days",
      "dependencies": ["Phase 1 completion", "Strategy interface understanding"]
    },
    "phase_3_futures_support": {
      "description": "Add futures-specific functionality",
      "deliverables": [
        "Leverage calculation and margin management",
        "Long/Short position handling",
        "Futures commission structure",
        "Integration with exchange adapters"
      ],
      "estimated_effort": "2-3 days",
      "dependencies": ["Phase 2 completion", "Exchange adapter understanding"]
    },
    "phase_4_reporting": {
      "description": "Implement grid-specific reporting and analytics",
      "deliverables": [
        "Grid performance metrics calculation",
        "Enhanced Excel reporting with grid visualizations",
        "CSV export for grid-specific data",
        "Integration with existing reporting framework"
      ],
      "estimated_effort": "3-4 days",
      "dependencies": [
        "Phase 3 completion",
        "Reporting framework understanding"
      ]
    },
    "phase_5_optimization": {
      "description": "Grid parameter optimization using genetic algorithms",
      "deliverables": [
        "Grid parameter ranges and constraints",
        "Integration with existing optimization framework",
        "Multi-objective optimization (profit vs drawdown)",
        "Batch processing for multiple configurations"
      ],
      "estimated_effort": "2-3 days",
      "dependencies": [
        "Phase 4 completion",
        "Optimization framework understanding"
      ]
    },
    "phase_6_testing_validation": {
      "description": "Comprehensive testing and validation",
      "deliverables": [
        "Unit tests for all grid components",
        "Integration tests with real market data",
        "Performance benchmarking",
        "Documentation and examples"
      ],
      "estimated_effort": "2-3 days",
      "dependencies": ["All previous phases"]
    }
  },

  "technical_specifications": {
    "grid_calculation_algorithms": {
      "linear_spacing": "Equal percentage or dollar spacing between levels",
      "geometric_spacing": "Exponentially increasing/decreasing spacing",
      "dynamic_adjustment": "Adjust grid based on volatility or market conditions"
    },
    "position_management": {
      "entry_logic": "Trigger when price crosses grid level",
      "exit_logic": "Close when profit target reached",
      "risk_management": "Maximum concurrent positions, total exposure limits",
      "margin_calculation": "Position size * price / leverage for futures"
    },
    "performance_considerations": {
      "memory_efficiency": "Efficient storage of grid levels and positions",
      "processing_speed": "Optimized price level checking algorithms",
      "scalability": "Support for hundreds of grid levels if needed"
    },
    "data_structures": {
      "grid_levels_storage": "Slice of GridLevel structs sorted by price",
      "position_tracking": "Map[int]*GridPosition keyed by grid level",
      "price_lookup": "Binary search or hash map for fast level identification"
    }
  },

  "testing_strategy": {
    "unit_tests": {
      "grid_calculation": "Test linear, geometric, and dynamic spacing algorithms",
      "position_management": "Test entry, exit, and P&L calculations",
      "profit_targets": "Verify profit calculation and trigger logic",
      "margin_handling": "Test leverage and margin calculations for futures"
    },
    "integration_tests": {
      "backtest_engine": "Full integration with existing backtest framework",
      "data_provider": "CSV loading and parsing with grid strategy",
      "reporting": "Complete workflow from data to Excel output",
      "optimization": "Parameter optimization with genetic algorithms"
    },
    "validation_tests": {
      "historical_data": "Backtest against known market periods",
      "edge_cases": "Price gaps, extreme volatility, low liquidity periods",
      "performance": "Large datasets with many grid levels",
      "accuracy": "Compare results with manual calculations"
    }
  },

  "configuration_examples": {
    "simple_long_grid": {
      "symbol": "BTCUSDT",
      "category": "linear",
      "trading_mode": "long",
      "lower_bound": 45000.0,
      "upper_bound": 55000.0,
      "grid_count": 20,
      "grid_spacing_percent": 2.5,
      "profit_percent": 1.0,
      "position_size": 100.0,
      "leverage": 1.0,
      "initial_balance": 10000.0,
      "commission": 0.0006
    },
    "both_directions_grid": {
      "symbol": "ETHUSDT",
      "category": "linear",
      "trading_mode": "both",
      "lower_bound": 2000.0,
      "upper_bound": 4000.0,
      "grid_count": 40,
      "grid_spacing_percent": 2.0,
      "profit_percent": 0.8,
      "position_size": 50.0,
      "leverage": 2.0,
      "initial_balance": 5000.0,
      "commission": 0.0006
    },
    "high_frequency_grid": {
      "symbol": "SOLUSDT",
      "category": "linear",
      "trading_mode": "both",
      "lower_bound": 180.0,
      "upper_bound": 220.0,
      "grid_count": 100,
      "grid_spacing_percent": 0.4,
      "profit_percent": 0.2,
      "position_size": 25.0,
      "leverage": 3.0,
      "initial_balance": 2500.0,
      "commission": 0.0006
    }
  },

  "reusable_components_mapping": {
    "data_layer": {
      "csv_provider": "Direct reuse - pkg/data/csv_provider.go",
      "ohlcv_types": "Direct reuse - pkg/types/market_data.go",
      "data_validation": "Direct reuse - existing validation logic"
    },
    "execution_layer": {
      "commission_calculation": "Reuse from internal/backtest/engine.go",
      "equity_tracking": "Extend existing equity curve functionality",
      "drawdown_calculation": "Direct reuse - existing algorithms"
    },
    "reporting_layer": {
      "excel_framework": "Extend pkg/reporting/excel.go for grid-specific sheets",
      "csv_export": "Extend pkg/reporting/csv.go for grid trade details",
      "metrics_calculation": "Reuse Sharpe, Sortino, Calmar calculations"
    },
    "orchestration_layer": {
      "workflow_management": "Direct reuse - pkg/orchestrator/orchestrator.go",
      "batch_processing": "Direct reuse - existing interval runner pattern",
      "optimization": "Extend pkg/optimization/ga.go for grid parameters"
    }
  },

  "risk_considerations": {
    "technical_risks": {
      "performance_degradation": "Many grid levels could slow processing - mitigate with efficient algorithms",
      "memory_usage": "Large number of positions - implement memory-efficient storage",
      "accuracy_issues": "Floating point precision in price calculations - use appropriate rounding"
    },
    "functional_risks": {
      "grid_parameter_validation": "Invalid ranges could cause infinite loops - implement robust validation",
      "profit_calculation_errors": "Commission and slippage handling - thorough testing required",
      "position_tracking_bugs": "Complex state management - comprehensive unit testing needed"
    },
    "integration_risks": {
      "backtest_engine_compatibility": "Changes might break existing DCA functionality - careful isolation needed",
      "reporting_conflicts": "Grid reports might interfere with DCA reports - separate namespaces required"
    }
  },

  "success_metrics": {
    "functionality": [
      "Successful backtesting of all three trading modes (long, short, both)",
      "Accurate position tracking for individual grid levels",
      "Proper profit calculation including commission and slippage",
      "Integration with existing CSV data pipeline",
      "Excel reporting with grid-specific visualizations"
    ],
    "performance": [
      "Process 1M+ candles with 100+ grid levels in <60 seconds",
      "Memory usage remains under 1GB for large datasets",
      "Optimization runs complete within reasonable time bounds"
    ],
    "quality": [
      "90%+ unit test coverage for new grid components",
      "All integration tests pass with existing backtest framework",
      "Manual validation matches automated results within 0.01% tolerance",
      "No regression in existing DCA bot functionality"
    ]
  },

  "future_enhancements": {
    "advanced_features": [
      "Dynamic grid adjustment based on volatility",
      "Multiple grid strategies running simultaneously",
      "Integration with live trading engine",
      "Machine learning optimization of grid parameters"
    ],
    "visualization_improvements": [
      "Interactive grid visualization in web interface",
      "Real-time grid performance monitoring",
      "3D visualization of profit surfaces across parameter ranges"
    ],
    "integration_expansions": [
      "Support for additional exchanges beyond Bybit",
      "Integration with external data providers",
      "API endpoints for grid strategy management"
    ]
  },

  "file_structure": {
    "new_files_to_create": [
      "internal/backtest/grid_engine.go",
      "internal/strategy/grid_strategy.go",
      "pkg/reporting/grid_reporter.go",
      "pkg/config/grid_config.go",
      "cmd/grid-backtest/main.go",
      "cmd/grid-backtest/flags.go"
    ],
    "files_to_modify": [
      "pkg/orchestrator/orchestrator.go - Add grid workflow support",
      "pkg/reporting/interfaces.go - Add grid reporting interface",
      "pkg/optimization/ga.go - Add grid parameter optimization"
    ],
    "configuration_files": [
      "configs/grid-bot/btc_grid_example.json",
      "configs/grid-bot/eth_grid_example.json",
      "configs/grid-bot/sol_grid_example.json"
    ]
  }
}
