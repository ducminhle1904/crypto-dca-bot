{
  "project": "Enhanced DCA Bot - Advanced Spacing Strategies",
  "version": "1.0.0",
  "created": "2025-09-15",
  "overview": {
    "objective": "Implement advanced DCA spacing strategies to improve trading performance through market-adaptive entry spacing",
    "current_state": {
      "spacing_method": "Fixed progressive (base_threshold * multiplier^level)",
      "example": "1.0% → 1.15% → 1.32% → 1.52% → 1.75%",
      "limitations": [
        "No market condition awareness",
        "Fixed progression regardless of volatility",
        "No technical level consideration",
        "Same spacing for all market regimes"
      ]
    },
    "target_improvements": [
      "Volatility-adaptive spacing",
      "Fibonacci-based natural levels",
      "Market regime awareness",
      "Support/resistance level integration",
      "Momentum-based adaptation"
    ]
  },

  "implementation_phases": {
    "phase_1": {
      "name": "Core Infrastructure & Volatility-Adaptive Spacing",
      "duration": "3-4 days",
      "priority": "HIGH",
      "description": "Establish spacing strategy framework and implement volatility-adaptive spacing",
      "deliverables": [
        "DCASpacingStrategy interface",
        "MarketContext data structure",
        "VolatilityAdaptiveSpacing implementation",
        "Configuration support",
        "Basic testing"
      ]
    },
    "phase_2": {
      "name": "Fibonacci & Exponential Decay Strategies",
      "duration": "2-3 days",
      "priority": "MEDIUM",
      "description": "Implement mathematical progression strategies",
      "deliverables": [
        "FibonacciSpacing strategy",
        "ExponentialDecaySpacing strategy",
        "Strategy factory pattern",
        "Enhanced configuration options"
      ]
    },
    "phase_3": {
      "name": "Market Regime & Technical Analysis Integration",
      "duration": "4-5 days",
      "priority": "MEDIUM",
      "description": "Advanced market-aware spacing strategies",
      "deliverables": [
        "Market regime detection",
        "Support/resistance level detection",
        "RegimeAdaptiveSpacing strategy",
        "TechnicalLevelSpacing strategy"
      ]
    },
    "phase_4": {
      "name": "Backtesting & Optimization Integration",
      "duration": "2-3 days",
      "priority": "HIGH",
      "description": "Integrate with existing backtest and optimization systems",
      "deliverables": [
        "Backtest engine integration",
        "Optimization parameter ranges",
        "Performance comparison tools",
        "Strategy evaluation metrics"
      ]
    },
    "phase_5": {
      "name": "Live Bot Integration & Testing",
      "duration": "3-4 days",
      "priority": "HIGH",
      "description": "Integrate with live bot and comprehensive testing",
      "deliverables": [
        "Live bot integration",
        "State persistence",
        "Configuration validation",
        "Production testing"
      ]
    }
  },

  "detailed_tasks": {
    "phase_1_tasks": [
      {
        "id": "P1T1",
        "name": "Create DCA Spacing Strategy Interface",
        "files": ["internal/strategy/spacing/interface.go"],
        "description": "Define interface for all spacing strategies",
        "code_structure": {
          "interface": "DCASpacingStrategy",
          "methods": [
            "CalculateThreshold(level int, context *MarketContext) float64",
            "GetName() string",
            "GetParameters() map[string]interface{}",
            "ValidateConfig() error"
          ]
        }
      },
      {
        "id": "P1T2",
        "name": "Create MarketContext Structure",
        "files": ["internal/strategy/spacing/types.go"],
        "description": "Data structure for market information needed by spacing strategies",
        "code_structure": {
          "struct": "MarketContext",
          "fields": [
            "CurrentPrice float64",
            "LastEntryPrice float64",
            "ATR float64",
            "RSI float64",
            "MACD float64",
            "Volume float64",
            "PriceHistory []float64",
            "Timestamp time.Time"
          ]
        }
      },
      {
        "id": "P1T3",
        "name": "Implement Volatility-Adaptive Spacing",
        "files": ["internal/strategy/spacing/volatility_adaptive.go"],
        "description": "Market volatility-based DCA spacing strategy",
        "parameters": {
          "base_threshold": "float64",
          "volatility_sensitivity": "float64",
          "atr_period": "int",
          "max_threshold": "float64",
          "min_threshold": "float64",
          "level_multiplier": "float64"
        },
        "algorithm": "adaptiveThreshold = baseThreshold * (0.5 + normalizedVolatility * sensitivity) * levelMultiplier^level"
      },
      {
        "id": "P1T4",
        "name": "Update Configuration Schema",
        "files": [
          "pkg/config/dca_config.go",
          "configs/bybit/dca/template_spacing.json"
        ],
        "description": "Add spacing strategy configuration support"
      },
      {
        "id": "P1T5",
        "name": "Integrate with Enhanced DCA Strategy",
        "files": ["internal/strategy/enhanced_dca.go"],
        "description": "Replace fixed threshold calculation with pluggable spacing strategy"
      }
    ],

    "phase_2_tasks": [
      {
        "id": "P2T1",
        "name": "Implement Fibonacci Spacing",
        "files": ["internal/strategy/spacing/fibonacci.go"],
        "description": "Fibonacci ratio-based DCA spacing",
        "fibonacci_levels": [1.0, 1.618, 2.618, 4.236, 6.854, 11.09, 17.944],
        "algorithm": "threshold = baseThreshold * fibonacciLevel[dcaLevel]"
      },
      {
        "id": "P2T2",
        "name": "Implement Exponential Decay Spacing",
        "files": ["internal/strategy/spacing/exponential_decay.go"],
        "description": "Exponentially decaying threshold spacing",
        "parameters": {
          "max_threshold": "float64",
          "min_threshold": "float64",
          "decay_rate": "float64"
        },
        "algorithm": "threshold = minThreshold + (maxThreshold - minThreshold) * exp(-decayRate * level)"
      },
      {
        "id": "P2T3",
        "name": "Create Strategy Factory",
        "files": ["internal/strategy/spacing/factory.go"],
        "description": "Factory pattern for creating spacing strategies",
        "supported_strategies": [
          "fixed",
          "volatility_adaptive",
          "fibonacci",
          "exponential_decay",
          "regime_adaptive",
          "technical_levels"
        ]
      }
    ],

    "phase_3_tasks": [
      {
        "id": "P3T1",
        "name": "Market Regime Detection",
        "files": ["internal/analysis/market_regime.go"],
        "description": "Detect bull/bear/sideways market conditions",
        "indicators": ["EMA trends", "ADX", "Bollinger Band width"],
        "regimes": ["bull", "bear", "sideways", "high_volatility"]
      },
      {
        "id": "P3T2",
        "name": "Support/Resistance Level Detection",
        "files": ["internal/analysis/support_resistance.go"],
        "description": "Identify key technical levels for spacing",
        "methods": [
          "Pivot points",
          "Volume profile",
          "Historical significant levels"
        ]
      },
      {
        "id": "P3T3",
        "name": "Implement Regime-Adaptive Spacing",
        "files": ["internal/strategy/spacing/regime_adaptive.go"],
        "description": "Adjust spacing based on market regime",
        "regime_multipliers": {
          "bull": 0.7,
          "bear": 1.5,
          "sideways": 1.0,
          "high_volatility": 1.3
        }
      }
    ],

    "phase_4_tasks": [
      {
        "id": "P4T1",
        "name": "Backtest Engine Integration",
        "files": ["pkg/orchestrator/backtest_runner.go"],
        "description": "Integrate spacing strategies with backtesting"
      },
      {
        "id": "P4T2",
        "name": "Optimization Parameter Ranges",
        "files": ["pkg/optimization/ranges.go"],
        "description": "Add spacing strategy parameters to genetic algorithm optimization"
      },
      {
        "id": "P4T3",
        "name": "Performance Comparison Tools",
        "files": ["pkg/reporting/spacing_analysis.go"],
        "description": "Tools to compare spacing strategy performance"
      }
    ],

    "phase_5_tasks": [
      {
        "id": "P5T1",
        "name": "Live Bot Integration",
        "files": ["internal/bot/live_bot.go"],
        "description": "Integrate spacing strategies with live trading bot"
      },
      {
        "id": "P5T2",
        "name": "State Persistence",
        "files": ["internal/persistence/spacing_state.go"],
        "description": "Persist spacing strategy state across bot restarts"
      }
    ]
  },

  "configuration_schemas": {
    "dca_spacing_config": {
      "description": "Configuration structure for DCA spacing strategies",
      "schema": {
        "dca_spacing": {
          "strategy": "string (enum: fixed, volatility_adaptive, fibonacci, exponential_decay, regime_adaptive, technical_levels)",
          "parameters": "object (strategy-specific parameters)"
        }
      },
      "examples": {
        "volatility_adaptive": {
          "dca_spacing": {
            "strategy": "volatility_adaptive",
            "parameters": {
              "base_threshold": 0.01,
              "volatility_sensitivity": 2.0,
              "atr_period": 14,
              "max_threshold": 0.05,
              "min_threshold": 0.003,
              "level_multiplier": 1.1
            }
          }
        },
        "fibonacci": {
          "dca_spacing": {
            "strategy": "fibonacci",
            "parameters": {
              "base_threshold": 0.01,
              "max_levels": 7,
              "fibonacci_sequence": [
                1.0, 1.618, 2.618, 4.236, 6.854, 11.09, 17.944
              ]
            }
          }
        },
        "exponential_decay": {
          "dca_spacing": {
            "strategy": "exponential_decay",
            "parameters": {
              "max_threshold": 0.03,
              "min_threshold": 0.005,
              "decay_rate": 0.3,
              "max_levels": 10
            }
          }
        }
      }
    }
  },

  "command_line_integration": {
    "new_flags": [
      {
        "flag": "-spacing-strategy",
        "type": "string",
        "default": "fixed",
        "description": "DCA spacing strategy (fixed, volatility_adaptive, fibonacci, exponential_decay)"
      },
      {
        "flag": "-volatility-sensitivity",
        "type": "float64",
        "default": 2.0,
        "description": "Volatility sensitivity for adaptive spacing"
      },
      {
        "flag": "-spacing-max-threshold",
        "type": "float64",
        "default": 0.05,
        "description": "Maximum threshold for spacing strategies"
      },
      {
        "flag": "-spacing-min-threshold",
        "type": "float64",
        "default": 0.003,
        "description": "Minimum threshold for spacing strategies"
      }
    ],
    "usage_examples": [
      "dca-backtest -symbol BTCUSDT -spacing-strategy volatility_adaptive -volatility-sensitivity 1.5",
      "dca-backtest -symbol ETHUSDT -spacing-strategy fibonacci -base-threshold 0.012",
      "dca-backtest -symbol SOLUSDT -spacing-strategy exponential_decay -spacing-max-threshold 0.04"
    ]
  },

  "testing_strategy": {
    "unit_tests": [
      "Test each spacing strategy calculation",
      "Test strategy factory creation",
      "Test configuration validation",
      "Test MarketContext data handling"
    ],
    "integration_tests": [
      "Test with backtest engine",
      "Test with optimization system",
      "Test with live bot integration"
    ],
    "performance_tests": [
      "Compare spacing strategies on historical data",
      "Benchmark computation performance",
      "Memory usage analysis"
    ],
    "backtesting_validation": {
      "datasets": [
        "BTCUSDT 1h (Bull market)",
        "ETHUSDT 1h (Bear market)",
        "SOLUSDT 5m (High volatility)",
        "Multiple timeframes and symbols"
      ],
      "comparison_metrics": [
        "Total return",
        "Maximum drawdown",
        "Sharpe ratio",
        "Win rate",
        "Average trade duration",
        "Number of DCA levels used"
      ]
    }
  },

  "rollout_plan": {
    "stage_1": {
      "name": "Development & Unit Testing",
      "duration": "1-2 weeks",
      "activities": [
        "Implement core infrastructure",
        "Create volatility-adaptive strategy",
        "Unit tests and basic validation"
      ]
    },
    "stage_2": {
      "name": "Backtesting & Optimization",
      "duration": "1 week",
      "activities": [
        "Integrate with backtest system",
        "Run comprehensive historical analysis",
        "Compare strategy performance"
      ]
    },
    "stage_3": {
      "name": "Additional Strategies",
      "duration": "1-2 weeks",
      "activities": [
        "Implement Fibonacci and exponential decay",
        "Add market regime detection",
        "Advanced strategy development"
      ]
    },
    "stage_4": {
      "name": "Live Bot Integration",
      "duration": "1 week",
      "activities": [
        "Integrate with live trading bot",
        "State persistence implementation",
        "Production testing"
      ]
    },
    "stage_5": {
      "name": "Production Deployment",
      "duration": "3-5 days",
      "activities": [
        "Configuration migration",
        "Live testing with small positions",
        "Full production rollout"
      ]
    }
  },

  "risk_mitigation": {
    "development_risks": [
      {
        "risk": "Strategy calculation errors",
        "mitigation": "Comprehensive unit tests with edge cases"
      },
      {
        "risk": "Performance degradation",
        "mitigation": "Benchmark testing and optimization"
      },
      {
        "risk": "Configuration complexity",
        "mitigation": "Validation and sensible defaults"
      }
    ],
    "trading_risks": [
      {
        "risk": "Overly aggressive spacing",
        "mitigation": "Maximum threshold limits and validation"
      },
      {
        "risk": "Strategy underperformance",
        "mitigation": "Fallback to proven fixed strategy"
      },
      {
        "risk": "Market condition edge cases",
        "mitigation": "Extensive backtesting on various market conditions"
      }
    ]
  },

  "success_criteria": {
    "technical": [
      "All spacing strategies implemented and tested",
      "Seamless integration with existing systems",
      "Performance benchmarks maintained",
      "Zero regression in existing functionality"
    ],
    "trading_performance": [
      "At least one strategy shows 15%+ improvement over fixed spacing",
      "Volatility-adaptive strategy performs well across different market conditions",
      "Reduced maximum drawdown while maintaining returns",
      "Improved risk-adjusted returns (Sharpe ratio)"
    ],
    "usability": [
      "Simple configuration for common use cases",
      "Clear documentation and examples",
      "Intuitive command-line interface",
      "Easy strategy comparison and selection"
    ]
  },

  "future_enhancements": [
    "Machine learning-based spacing optimization",
    "Real-time market sentiment integration",
    "Cross-timeframe spacing coordination",
    "Dynamic strategy switching based on performance",
    "Custom strategy scripting interface"
  ]
}
