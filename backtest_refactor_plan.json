{
  "refactor_plan": {
    "title": "Crypto DCA Bot Backtest Refactoring Plan",
    "version": "1.0",
    "created_date": "2024-01-XX",
    "status": "planned",
    "current_issues": [
      "Massive main.go file (4147 lines)",
      "Mixed responsibilities in single file",
      "Hard to reuse for different bot types",
      "Difficult to test individual components",
      "Genetic Algorithm and optimization tightly coupled to DCA logic",
      "Configuration management scattered throughout",
      "Reporting logic embedded in main flow"
    ],
    "goals": [
      "Reduce main.go to <200 lines",
      "Create reusable components for 80% of logic",
      "Enable easy addition of new bot types",
      "Improve testability and maintainability",
      "Separate concerns properly",
      "Create clean interfaces between components"
    ],
    "target_structure": {
      "pkg": {
        "config": {
          "description": "Configuration management and validation",
          "files": [
            "manager.go",
            "interfaces.go",
            "dca_config.go",
            "grid_config.go",
            "validation.go",
            "conversion.go"
          ],
          "interfaces": ["ConfigManager", "Config", "Validator"],
          "responsibilities": [
            "Load configuration from files",
            "Validate configuration parameters",
            "Convert between flat and nested formats",
            "Handle different bot type configs"
          ]
        },
        "optimization": {
          "description": "Parameter optimization algorithms",
          "files": [
            "interfaces.go",
            "genetic_algorithm.go",
            "grid_search.go",
            "bayesian.go",
            "evaluator.go",
            "population.go",
            "crossover.go",
            "mutation.go"
          ],
          "interfaces": ["Optimizer", "Evaluator", "Individual"],
          "responsibilities": [
            "Run genetic algorithm optimization",
            "Provide different optimization strategies",
            "Evaluate fitness of parameter sets",
            "Handle parallel evaluation"
          ]
        },
        "validation": {
          "description": "Validation and testing methods",
          "files": [
            "interfaces.go",
            "walk_forward.go",
            "cross_validation.go",
            "monte_carlo.go",
            "holdout.go"
          ],
          "interfaces": ["Validator", "ValidationResult"],
          "responsibilities": [
            "Walk-forward validation",
            "Cross-validation",
            "Monte Carlo simulation",
            "Out-of-sample testing"
          ]
        },
        "reporting": {
          "description": "Output generation and formatting",
          "files": [
            "interfaces.go",
            "console.go",
            "excel.go",
            "csv.go",
            "json.go",
            "html.go",
            "chain.go"
          ],
          "interfaces": ["Reporter", "ReporterChain"],
          "responsibilities": [
            "Generate console output",
            "Create Excel reports with analysis",
            "Export CSV trade data",
            "Generate JSON results",
            "Chain multiple reporters"
          ]
        },
        "data": {
          "description": "Data loading and management",
          "files": [
            "interfaces.go",
            "csv_provider.go",
            "database_provider.go",
            "api_provider.go",
            "cached_provider.go",
            "validation.go",
            "filters.go"
          ],
          "interfaces": ["DataProvider", "DataCache", "DataFilter"],
          "responsibilities": [
            "Load data from various sources",
            "Cache data for performance",
            "Filter data by time periods",
            "Validate data integrity"
          ]
        },
        "orchestrator": {
          "description": "Main coordination and workflow",
          "files": ["orchestrator.go", "workflow.go", "interval_runner.go"],
          "interfaces": ["Orchestrator", "Workflow"],
          "responsibilities": [
            "Coordinate all components",
            "Run single backtests",
            "Run multi-interval analysis",
            "Handle optimization and validation flows"
          ]
        }
      },
      "cmd": {
        "dca-backtest": {
          "description": "DCA-specific backtest runner",
          "files": ["main.go", "flags.go"],
          "size_estimate": "150-200 lines"
        },
        "grid-backtest": {
          "description": "Future: Grid bot backtest runner",
          "files": ["main.go", "flags.go"],
          "size_estimate": "150-200 lines",
          "status": "future"
        },
        "momentum-backtest": {
          "description": "Future: Momentum bot backtest runner",
          "files": ["main.go", "flags.go"],
          "size_estimate": "150-200 lines",
          "status": "future"
        },
        "common": {
          "description": "Shared CLI utilities",
          "files": ["flags.go", "utils.go", "version.go"]
        }
      },
      "internal": {
        "backtest": {
          "status": "keep_as_is",
          "description": "Already well-structured",
          "note": "Current backtest engine is good"
        },
        "strategy": {
          "status": "expand",
          "description": "Expand interface for new bot types",
          "changes": [
            "Add grid strategy",
            "Add momentum strategy",
            "Enhance interface if needed"
          ]
        },
        "indicators": {
          "status": "keep_as_is",
          "description": "Already well-structured"
        }
      }
    },
    "implementation_phases": [
      {
        "phase": 1,
        "title": "Extract Core Packages",
        "status": "planned",
        "estimated_time": "2-3 days",
        "priority": "high",
        "tasks": [
          {
            "task": "Create pkg/config package",
            "description": "Move all configuration logic from main.go",
            "files_to_move": [
              "BacktestConfig struct",
              "NestedConfig struct",
              "loadConfig function",
              "validateConfig function",
              "convertToNestedConfig function"
            ],
            "lines_moved": "~400 lines",
            "dependencies": []
          },
          {
            "task": "Create pkg/data package",
            "description": "Move data loading and management",
            "files_to_move": [
              "loadHistoricalData functions",
              "filterDataByPeriod function",
              "Data caching logic",
              "CSV parsing logic"
            ],
            "lines_moved": "~300 lines",
            "dependencies": []
          }
        ]
      },
      {
        "phase": 2,
        "title": "Extract Complex Logic",
        "status": "planned",
        "estimated_time": "3-4 days",
        "priority": "high",
        "dependencies": ["phase_1"],
        "tasks": [
          {
            "task": "Create pkg/optimization package",
            "description": "Move entire GA optimization system",
            "files_to_move": [
              "Individual struct",
              "initializePopulation function",
              "evaluatePopulationParallel function",
              "createNextGeneration function",
              "crossover/mutation functions",
              "optimizeForInterval function"
            ],
            "lines_moved": "~800 lines",
            "complexity": "high"
          },
          {
            "task": "Create pkg/validation package",
            "description": "Move walk-forward validation",
            "files_to_move": [
              "WalkForwardConfig struct",
              "runWalkForwardValidation function",
              "createRollingFolds function",
              "All WF helper functions"
            ],
            "lines_moved": "~400 lines",
            "complexity": "medium"
          }
        ]
      },
      {
        "phase": 3,
        "title": "Extract Reporting",
        "status": "planned",
        "estimated_time": "2-3 days",
        "priority": "medium",
        "dependencies": ["phase_1"],
        "tasks": [
          {
            "task": "Create pkg/reporting package",
            "description": "Move all output generation",
            "files_to_move": [
              "outputConsole function",
              "writeTradesXLSX function",
              "writeTradesCSV function",
              "printBestConfigJSON function",
              "All Excel generation logic"
            ],
            "lines_moved": "~1000 lines",
            "complexity": "medium"
          }
        ]
      },
      {
        "phase": 4,
        "title": "Create Orchestrator",
        "status": "planned",
        "estimated_time": "2-3 days",
        "priority": "high",
        "dependencies": ["phase_1", "phase_2", "phase_3"],
        "tasks": [
          {
            "task": "Create pkg/orchestrator package",
            "description": "Move main coordination logic",
            "files_to_move": [
              "runAcrossIntervals function",
              "Main workflow logic",
              "Component coordination"
            ],
            "lines_moved": "~400 lines",
            "complexity": "high"
          }
        ]
      },
      {
        "phase": 5,
        "title": "Create Bot-Specific Commands",
        "status": "planned",
        "estimated_time": "1-2 days",
        "priority": "medium",
        "dependencies": ["phase_4"],
        "tasks": [
          {
            "task": "Create cmd/dca-backtest/main.go",
            "description": "DCA-specific command runner",
            "lines_new": "~200 lines",
            "complexity": "low"
          },
          {
            "task": "Reduce original main.go",
            "description": "Minimal coordinator using orchestrator",
            "lines_remaining": "~200 lines",
            "lines_removed": "~3900 lines"
          }
        ]
      }
    ],
    "current_main_go_breakdown": {
      "total_lines": 4147,
      "sections": {
        "imports_constants": {
          "lines": "1-205",
          "count": 205,
          "action": "split_across_packages"
        },
        "configuration": {
          "lines": "206-1057",
          "count": 852,
          "action": "move_to_pkg_config",
          "target": "pkg/config/"
        },
        "data_loading": {
          "lines": "1498-1667",
          "count": 170,
          "action": "move_to_pkg_data",
          "target": "pkg/data/"
        },
        "genetic_algorithm": {
          "lines": "1708-2149",
          "count": 442,
          "action": "move_to_pkg_optimization",
          "target": "pkg/optimization/"
        },
        "walk_forward": {
          "lines": "3694-4088",
          "count": 395,
          "action": "move_to_pkg_validation",
          "target": "pkg/validation/"
        },
        "reporting": {
          "lines": "2414-3693",
          "count": 1280,
          "action": "move_to_pkg_reporting",
          "target": "pkg/reporting/"
        },
        "main_flow": {
          "lines": "463-743",
          "count": 281,
          "action": "move_to_pkg_orchestrator",
          "target": "pkg/orchestrator/"
        },
        "utilities": {
          "lines": "scattered",
          "count": 562,
          "action": "distribute_to_relevant_packages"
        }
      }
    },
    "testing_strategy": {
      "unit_tests": [
        "pkg/config: Test config loading and validation",
        "pkg/optimization: Test GA components in isolation",
        "pkg/validation: Test walk-forward logic",
        "pkg/data: Test data loading and filtering",
        "pkg/reporting: Test output generation"
      ],
      "integration_tests": [
        "Test full DCA backtest workflow",
        "Test optimization + validation pipeline",
        "Test multi-interval analysis"
      ],
      "benchmark_tests": [
        "Compare performance before/after refactor",
        "Test parallel optimization performance"
      ]
    },
    "migration_checklist": {
      "before_starting": [
        "Create feature branch for refactor",
        "Backup current working version",
        "Create comprehensive test suite for current functionality",
        "Document current CLI interface"
      ],
      "during_refactor": [
        "Maintain backward compatibility in CLI",
        "Keep tests passing after each phase",
        "Update documentation as components move",
        "Validate output remains identical"
      ],
      "after_completion": [
        "Run full test suite",
        "Performance benchmarking",
        "Update README and documentation",
        "Create examples for new bot types"
      ]
    },
    "future_extensions": {
      "new_bot_types": [
        {
          "name": "Grid Trading Bot",
          "strategy": "Place buy/sell orders at regular intervals",
          "config_additions": ["grid_size", "grid_levels", "grid_range"],
          "effort": "Low - just implement Strategy interface"
        },
        {
          "name": "Momentum Trading Bot",
          "strategy": "Buy on momentum, sell on reversal",
          "config_additions": ["momentum_threshold", "reversal_signals"],
          "effort": "Low - just implement Strategy interface"
        },
        {
          "name": "Mean Reversion Bot",
          "strategy": "Buy oversold, sell overbought conditions",
          "config_additions": ["reversion_levels", "holding_period"],
          "effort": "Low - just implement Strategy interface"
        }
      ],
      "optimization_methods": [
        "Bayesian Optimization",
        "Particle Swarm Optimization",
        "Differential Evolution",
        "Hyperband"
      ],
      "validation_methods": [
        "K-Fold Cross Validation",
        "Time Series Cross Validation",
        "Purged Cross Validation",
        "Monte Carlo Simulation"
      ],
      "reporting_formats": [
        "Interactive HTML Dashboard",
        "PDF Reports",
        "Real-time WebSocket Updates",
        "Slack/Discord Notifications"
      ]
    },
    "risks_and_mitigations": {
      "risks": [
        {
          "risk": "Breaking existing functionality",
          "probability": "medium",
          "impact": "high",
          "mitigation": "Comprehensive test suite and gradual migration"
        },
        {
          "risk": "Performance degradation",
          "probability": "low",
          "impact": "medium",
          "mitigation": "Benchmark before/after, maintain parallel evaluation"
        },
        {
          "risk": "Increased complexity",
          "probability": "medium",
          "impact": "low",
          "mitigation": "Clear interfaces and good documentation"
        }
      ]
    },
    "success_metrics": {
      "code_quality": {
        "main_go_lines": "<200 (from 4147)",
        "package_cohesion": "High - single responsibility",
        "test_coverage": ">80%",
        "cyclomatic_complexity": "<10 per function"
      },
      "reusability": {
        "new_bot_effort": "<1 day to add new bot type",
        "component_reuse": ">80% of logic reusable",
        "interface_stability": "No breaking changes to Strategy interface"
      },
      "performance": {
        "optimization_speed": "No degradation vs current",
        "memory_usage": "No significant increase",
        "startup_time": "<1 second for CLI"
      }
    }
  }
}
